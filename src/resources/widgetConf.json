{
  "name": "MessageTable",
  "id": "MessageTable",
  "thumbnailURL": "",
  "configs": {
    "pubsub": {
      "types": [
        "subscriber"
      ]
    },
    "providerConfig": {
      "configs": {
        "type": "SiddhiStoreDataProvider",
        "config": {
          "siddhiApp": "@App:name('ESBEventTable-SiddhiApp')define stream DecompressedEventStream (metaTenantId int, messageFlowId string, host string, hashCode string, componentName string, componentType string, componentIndex int, componentId string, startTime long, endTime long, duration long, beforePayload string, afterPayload string, contextPropertyMap string, transportPropertyMap string, children string, entryPoint string, entryPointHashcode string, faultCount int, eventTimestamp long); @store(type = 'rdbms', datasource = 'EI_ANALYTICS', field.length='contextPropertyMap:1000,beforePayload:5000,afterPayload:5000' ) @Inde('metaTenantId','messageFlowId','host','hashCode','componentName','componentType','componentIndex','componentId','startTime','endTime','beforePayload','afterPayload','entryPoint','entryPointHashcode','faultCount') define table ESBEventTable (metaTenantId int, messageFlowId string, host string, hashCode string, componentName string, componentType string, componentIndex int, componentId string, startTime long, endTime long, duration long, beforePayload string, afterPayload string, contextPropertyMap string, transportPropertyMap string, children string, entryPoint string, entryPointHashcode string, faultCount int, eventTimestamp long);",
          "queryData": {
            "query": "from ESBEventTable on (startTime>='{{timeFrom}}' and startTime<'{{timeTo}}') and metaTenantId=={{metaTenantId}} and componentType=='{{componentType}}' and {{componentIdentifier}}=='{{componentName}}' select messageFlowId as messageId,host,startTime,ifThenElse(faultCount>0,'Failed','Success') as status;"
          },
          "publishingInterval": 60
        }
      }
    }
  }
}